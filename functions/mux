#!/bin/zsh

zmodload zsh/zutil
zmodload zsh/net/socket

typeset -gAH MuxFds
typeset -gAH MuxRequestIds

function mux() {
    setopt local_options err_return

    local -a arg_instance arg_background
    zparseopts -D -- \
        {b,-background}+=arg_background \
        {I,-instance}:=arg_instance ||
    return

    local instance
    if [[ -n $arg_instance ]]; then
        instance="$arg_instance[-1]"
    elif [[ -n "$MUX_SOCKET" ]]; then
        instance="$MUX_SOCKET"
    else
        echo '$MUX_SOCKET is not set' >&2
        return 1
    fi

    local -a call_jrpc=(jrpc request "$instance")
    if which jrpc &> /dev/null; then
        jrpc connect "$instance" "$instance"
    else
        call_jrpc[1]=jrpc-oneoff
    fi

    local jq_post
    if [[ -n $arg_background ]]; then
        call_jrpc[2]=notify
        jq_post=":"
    else
        call_jrpc[2]=request
        jq_post=jq
    fi

    local cmd="$1"
    shift
    case "$cmd" in
        get-var)
            local location="$1"
            local varname="$2"

            jq -nc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "USER",
                "keys": [ $varname ]
            }' | \
                "$call_jrpc[@]" mux.get-multiple | \
                "$jq_post" -ercj --arg v "$varname" '.values[$v]'
            ;;

        resolve-var)
            local location="$1"
            local varname="$2"

            jq -nc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "USER",
                "keys": [ $varname ]
            }' | \
                "$call_jrpc[@]" mux.resolve-multiple | \
                "$jq_post" -rcj --arg v "$varname" '.values[$v]'
            ;;

        set-var)
            local location="$1"
            local varname="$2"

            jq -Rsc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "USER",
                "values": {
                    $varname: .
                }
            }' | "$call_jrpc[@]" mux.set-multiple > /dev/null
            ;;

        delete-var)
            local location="$1"
            local varname="$2"

            jq -nc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "USER",
                "values": {
                    $varname: null
                }
            }' | "$call_jrpc[@]" mux.set-multiple > /dev/null
            ;;

        has-var)
            local location="$1"
            local varname="$2"

            jq -nc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "USER",
                "keys": [ $varname ]
            }' | \
                "$call_jrpc[@]" mux.get-multiple | \
                "$jq_post" -ercj --arg v "$varname" '.values[$v]' > /dev/null
            ;;

        list-vars)
            # TODO need to add to API
            printf 'list-vars not implemented\n' '' >&2
            return 1
            ;;

        get-info)
            local location="$1"
            shift
            local -a keys=("$@")

            if [[ -n $keys ]]; then
                jq -nc --arg location "$location" --arg keys "${(F)keys}" '{
                    "location": $location,
                    "namespace": "INFO",
                    "keys": $keys | split("\n")
                }' | \
                    "$call_jrpc[@]" mux.get-multiple | \
                    "$jq_post" -rcj '.values'
            else
                jq -nc --arg location "$location" '{
                    "location": $location,
                    "namespace": "INFO"
                }' | \
                    "$call_jrpc[@]" mux.get-all | \
                    "$jq_post" -rcj '.values'
            fi
            ;;

        resolve-info)
            local location="$1"
            shift
            local -a keys=("$@")

            if [[ -n $keys ]]; then
                jq -nc --arg location "$location" --arg keys "${(F)keys}" '{
                    "location": $location,
                    "namespace": "INFO",
                    "keys": $keys | split("\n")
                }' | \
                    "$call_jrpc[@]" mux.resolve-multiple | \
                    "$jq_post" -rcj '.values'
            else
                jq -nc --arg location "$location" '{
                    "location": $location,
                    "namespace": "INFO"
                }' | \
                    "$call_jrpc[@]" mux.resolve-all | \
                    "$jq_post" -rcj '.values'
            fi
            ;;

        set-info)
            local location="$1"
            shift

            local -a values_entries jq_args
            local key value i
            i=0
            for key value; do
                values_entries+=("\$key$i: \$value$i")
                jq_args+=(
                    --arg "key$i" "$key"
                    --arg "value$i" "$value"
                )
                i="$(($i + 1))"
            done

            jq -nc --arg location "$location" "$jq_args[@]" "{
                \"location\": \$location,
                \"namespace\": \"INFO\",
                \"values\": {
                    "${(j:,:)values_entries}"
                }
            }" | "$call_jrpc[@]" mux.clear-and-replace > /dev/null
            ;;

        merge-info)
            local location="$1"
            shift

            local -a values_entries jq_args
            local key value i
            i=0
            for key value; do
                values_entries+=("\$key$i: \$value$i")
                jq_args+=(
                    --arg "key$i" "$key"
                    --arg "value$i" "$value"
                )
                i="$(($i + 1))"
            done

            jq -nc --arg location "$location" "$jq_args[@]" "{
                \"location\": \$location,
                \"namespace\": \"INFO\",
                \"values\": {
                    "${(j:,:)values_entries}"
                }
            }" | "$call_jrpc[@]" mux.set-multiple > /dev/null
            ;;

        delete-info)
            local location="$1"
            shift

            local -a values_entries jq_args
            local key value i
            i=0
            for key value; do
                values_entries+=("\$key$i: null")
                jq_args+=(
                    --arg "key$i" "$key"
                )
                i="$(($i + 1))"
            done

            jq -nc --arg location "$location" "$jq_args[@]" "{
                \"location\": \$location,
                \"namespace\": \"INFO\",
                \"values\": {
                    "${(j:,:)values_entries}"
                }
            }" | "$call_jrpc[@]" mux.set-multiple > /dev/null
            ;;

        has-info)
            local location="$1"
            local varname="$2"

            jq -nc --arg location "$location" --arg varname "$varname" '{
                "location": $location,
                "namespace": "INFO",
                "keys": [ $varname ]
            }' | \
                "$call_jrpc[@]" mux.get-multiple | \
                "$jq_post" -ercj --arg v "$varname" '.values[$v]' > /dev/null
            ;;

        list-info)
            # TODO need to add to API
            printf 'list-vars not implemented\n' '' >&2
            return 1
            ;;

        *)
            printf 'Unsupported mux command %s\n' "$cmd" >&2
            return 1
            ;;
    esac
}

# mux "$@"
