#!/bin/zsh

RUN_TESTS_ARG0="$0"

cd "${0:a:h}"
source test-utils.zsh

zmodload zsh/param/private
zmodload zsh/zutil

export INDENT=""

function main() {
    private -a arg_invocation_type
    private -a arg_test_file
    private -a arg_test_name

    zparseopts -D -E -F -- \
        {b,f}=arg_invocation_type \
        -test-file:=arg_test_file \
        -test-name:=arg_test_name || return 1

    private test_file
    if [[ -n $arg_test_file[-1] ]]; then
        test_file="$arg_test_file[-1]"
    fi

    private test_name
    if [[ -n $arg_test_name[-1] ]]; then
        test_name="$arg_test_name[-1]"
    fi

    if [[ $# -ne 0 ]]; then
        error "Unexpected arguments ($*)"
        return 1
    fi

    source test-mux.plugin.zsh
    local SUT
    if [[ "$arg_invocation_type[-1]" == -b ]]; then
        SUT="$PWD/bin/test-mux"
    else
        SUT="test-mux"
    fi

    local -A TestFiles
    local -A TestNames
    local -A TestResults

    INDENT=""
    if [[ -n "$test_name" ]]; then
        source "$test_file"
        run-test "$test_file" "$test_name"
    elif [[ -n "$test_file" ]]; then
        run-file "$test_file"
    else
        run-file tests
    fi

    echo

    INDENT=""
    show-results
}

function run-file() {
    private test_file="$1"

    if [[ -d "$test_file" ]]; then
        private sub_file
        for sub_file in "$test_file"/**/*.test.zsh; do
            run-file "$sub_file"
        done
        return
    fi

    source "$test_file"

    private -a func_names
    func_names=(${(@k)functions})
    private -a test_names
    test_names=(${(M)func_names:#*.test})

    private test_name
    for test_name in "$test_names[@]"; do
        INDENT=""
        run-test "$test_file" "$test_name"
        unfunction "$test_name"
        echo
    done
}

function run-test() {
    private test_file="$1"
    private test_name="$2"
    private test_key="${test_file}::${test_name}"
    stdout "%F{yellow}RUNNING FILE%f ${test_file} %F{yellow}TEST%f ${test_name}..."
    INDENT="    "

    "$test_name"

    local test_out_dir="$PWD/test-out/$test_file/$test_name"
    mkdir -p "$test_out_dir"
    local -x REPORTED_PARAMS_DIR="$test_out_dir/params"

    local fd1 fd2
    fd1="$test_out_dir/stdout"
    fd2="$test_out_dir/stderr"

    pushd "$test_out_dir"

    (
        arrange
        UNDER_TEST=1 \
            act 3>&1 4>&2 1> "$fd1" 2> "$fd2"
    )
    (assert)
    private result="$?"

    popd

    TestFiles[$test_key]="$test_file"
    TestNames[$test_key]="$test_name"
    TestResults[$test_key]="$result"

    return $result
}

function show-results() {
    local key val
    local -a failures successes
    for key val in "${(@kv)TestResults}"; do
        if [[ "$val" -ne 0 ]]; then
            failures+=("$key")
        else
            successes+=("$key")
        fi
    done

    local num_tests
    (( num_tests = ${#failures} + ${#successes} ))
    if [[ ${#failures} -gt 0 ]]; then
        stderr "%F{red}FAILURE%f: ${#failures} / $num_tests tests failed:"
        INDENT="    "
        for key in "$failures[@]"; do
            stderr "$RUN_TESTS_ARG0 --test-file %F{yellow}$TestFiles[$key]%f --test-name %F{yellow}$TestNames[$key]%f"
        done
    else
        stdout "%F{green}SUCCESS: $num_tests / $num_tests passed%f"
    fi
}

main "$@"
